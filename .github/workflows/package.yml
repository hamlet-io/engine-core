name: package

on:

  # Workflow run will run after another job has completed
  # so we wait for the workflow to complete then get going
  workflow_run:
    workflows:
      - 'testing'

    branches:
      - 'master'
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

    types:
      - completed

  pull_request:

jobs:
  package:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: package
        working-directory: freemarker-wrapper/
        run: ./gradlew runtime

      - name: add build details
        run: |
          pip install hamlet
          hamlet engine add-engine-source-build

      - name: create artifact tar
        run: |
          tar -cvzf wrapper.tar.gz .hamlet/ freemarker-wrapper/build/libs freemarker-wrapper/build/image/

      - name: upload build details
        uses: actions/upload-artifact@v3
        with:
          name: wrapper_artifact
          path: wrapper.tar.gz

  release_tag:
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.ref, 'refs/tags/') }}
    needs:
      - package
    runs-on: ubuntu-latest

    steps:
      - name: Get wrapper
        uses: actions/download-artifact@v3
        with:
          name: wrapper_artifact
          path: ./

      - name: extract artifact
        run: |
          tar -zxvf wrapper.tar.gz

      - name: Create Releases
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: 'freemarker-wrapper/build/libs/*.jar'
          token: ${{ secrets.GITHUB_TOKEN }}


  docker_build:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs:
      - package

    steps:

      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: get artifact
        uses: actions/download-artifact@v3
        with:
          name: wrapper_artifact
          path: ./

      - name: extract artifact
        run: |
          tar -zxvf wrapper.tar.gz

      - id: find_wrapper_file
        name: find_wrapper_file
        run: |
          echo ::set-output NAME=WRAPPER_FILE_NAME::$(basename $(find freemarker-wrapper/build/libs/ -type f -name "freemarker-wrapper-*.jar"))

      - name: base meta
        id: base_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
          tags: |
            type=semver,pattern={{version}}
            type=edge,branch=master
            type=sha

      - name: base push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/*') || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.base_meta.outputs.tags }}
          labels: ${{ steps.base_meta.outputs.labels }}
          target: base
          build-args: |
            wrapper_file_name=${{steps.find_wrapper_file.outputs.WRAPPER_FILE_NAME}}

      - name: jar meta
        id: jar_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
            suffix=-jar,onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=edge,branch=master
            type=sha

      - name: jar push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/*') || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.jar_meta.outputs.tags }}
          labels: ${{ steps.jar_meta.outputs.labels }}
          target: jar
          build-args: |
            wrapper_file_name=${{steps.find_wrapper_file.outputs.WRAPPER_FILE_NAME}}

      - name: Darwin meta
        id: Darwin_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
            suffix=-Darwin,onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=edge,branch=master
            type=sha

      - name: Darwin push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/*') || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.Darwin_meta.outputs.tags }}
          labels: ${{ steps.Darwin_meta.outputs.labels }}
          target: Darwin
          build-args: |
            wrapper_file_name=${{steps.find_wrapper_file.outputs.WRAPPER_FILE_NAME}}

      - name: Linux meta
        id: Linux_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
            suffix=-Linux,onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=edge,branch=master
            type=sha

      - name: Linux push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/*') || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.Linux_meta.outputs.tags }}
          labels: ${{ steps.Linux_meta.outputs.labels }}
          target: Linux
          build-args: |
            wrapper_file_name=${{steps.find_wrapper_file.outputs.WRAPPER_FILE_NAME}}

      - name: Windows meta
        id: Windows_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
            suffix=-Windows,onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=edge,branch=master
            type=sha

      - name: Windows push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/*') || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.Windows_meta.outputs.tags }}
          labels: ${{ steps.Windows_meta.outputs.labels }}
          target: Windows
          build-args: |
            wrapper_file_name=${{steps.find_wrapper_file.outputs.WRAPPER_FILE_NAME}}
